# -*- coding: utf-8 -*-
"""
Created on Thu Aug 18 13:58:28 2022

@author: mcveigh
"""

#Starting with a GBK file containing a mix of sequences from different organisms. 
#Find all identical sequences from the same organism. Used to trim a list of rRNA sequences removing duplicates 
#GBK file generated by seqfetch -dn -Q missing_archaea_accs  -c 3 -t 3 > missing_archaea.gbk

import pandas as pd
import Bio
import os
import sys

inputfile = sys.argv[1]
#outputfile = sys.argv[2]

from Bio import SeqIO
from Bio.SeqUtils.CheckSum import seguid

sequences = [] 
orgname = []
uniquenames = []
duplicatenames = []
hash = []
table = []

for seq_record in SeqIO.parse(inputfile, "genbank"): 
    seq_record.description = seq_record.annotations["organism"]
    orgname = seq_record.annotations["organism"]
    sequences.append(seq_record)
    #print(seq_record.id, seguid(seq_record.seq))
    hash = seq_record.id, seq_record.description, seguid(seq_record.seq)
    #print(hash)
    table.append(hash)
    if orgname not in uniquenames:
        uniquenames.append(orgname)
    else:
        duplicatenames.append(orgname)
#print(uniquenames)       
#print("duplicate names ", duplicatenames) 
SeqIO.write(sequences, inputfile + ".fsa", "fasta")  
table_df = pd.DataFrame(table, columns=["accession", "orgname", "hash"])
#print(table_df)

notident_df = table_df.drop_duplicates(subset=["orgname", "hash"], keep='first')
print(notident_df )
#notident_df.to_excel("notidentical.xlsx", columns=['accession', 'orgname'],) 
notident_df[['accession','orgname']].to_excel("notidentical.xlsx", index=False) 

